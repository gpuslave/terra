name: Terraform

on:
  push:
    branches:
      - githubflow
  pull_request:
    branches:
      - main

env:
  TF_CLOUD_ORGANIZATION: "gpuslave_org"
  TF_API_TOKEN: "${{ secrets.TERRAFORM_API_KEY}} "
  TF_WORKSPACE: "gpuslave_workspace"
  CONFIG_DIRECTORY: "."

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.2
        id: upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true
      
      - uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.2
        id: run
        continue-on-error: true
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: true
      
      - uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.2
        id: plan-output
        with:
          plan: ${{ steps.run.outputs.plan_id }}

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
            })
            const output = `#### HCP Terraform Plan Output
                \`\`\`\n
                Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                \`\`\`
                [HCP Terraform Plan](${{ steps.run.outputs.run_link }})
                `
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - id: terraform-cloud-check-run-status
        if: ${{ steps.run.outputs.run_status != 'planned_and_finished'}}
        run: |
          echo "HCP Terraform Run Failed or Requires Further Attention"
          echo "Run Status: '${{ steps.run.outputs.run_status }}'"
          echo "${{ steps.run.outputs.run_link }}"
          exit 1
      


      # - name: Terraform Setup
      #   uses: hashicorp/setup-terraform@v3
      #   with:
      #     terraform_version: "1.10.4"
      #     cli_config_credentials_token: "${{ env.TF_API_TOKEN }}"
      
      # - name: Terraform Format
      #   working-directory: modules/services/yandex-cloud
      #   id: fmt
      #   run: |
      #     terraform fmt
      #   continue-on-error: true

      # - name: Terrafrom Initialization
      #   working-directory: modules/services/yandex-cloud
      #   id: init
      #   run: |
      #     terraform init

      # - name: Terraform Validate
      #   working-directory: modules/services/yandex-cloud
      #   id: validate
      #   run: |
      #     terraform validate
      
      # - name: Terraform Plan
      #   working-directory: modules/services/yandex-cloud
      #   run: terraform plan
      #   continue-on-error: true